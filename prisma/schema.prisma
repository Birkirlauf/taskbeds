generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  address String
  phone   String?
  email   String?

  // PMS Integration
  pmsProvider    String?
  pmsApiKey      String?
  pmsApiEndpoint String?
  pmsHotelId     String?
  pmsSyncEnabled Boolean @default(false)
  lastSyncedAt   DateTime?

  // Relations
  users    User[]
  rooms    Room[]
  tasks    Task[]
  issues   Issue[]
  reservations Reservation[]
  syncLogs     SyncLog[]

  @@map("hotels")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  password  String
  firstName String
  lastName  String
  name        String?
  role      Role    @default(STAFF)
  status    UserStatus @default(ACTIVE)

  // Relations
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  hotelId    String
  tasks      Task[]
  assignedRooms Room[] @relation("RoomAssignments")
  reportedIssues Issue[] @relation("ReportedIssues")
  assignedIssues Issue[] @relation("AssignedIssues")

  @@map("users")
}

model Room {
  id           String         @id @default(cuid())
  number       String
  type         String
  status       String         @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  assignedToId String?
  assignedTo   User?         @relation("RoomAssignments", fields: [assignedToId], references: [id])
  lastCleaned  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  floor        Int?

  // PMS Integration
  pmsRoomId    String?       @unique
  pmsRoomType  String?
  lastSyncedAt DateTime?

  // Relations
  hotel   Hotel @relation(fields: [hotelId], references: [id])
  hotelId String
  tasks   Task[]
  issues  Issue[]
  reservations Reservation[]

  @@unique([hotelId, number])
  @@map("rooms")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?

  // Relations
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId String
  room    Room?  @relation(fields: [roomId], references: [id])
  roomId  String?
  user    User?  @relation(fields: [userId], references: [id])
  userId  String?

  @@map("tasks")
}

model Issue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        IssueType @default(MAINTENANCE)
  description String
  status      IssueStatus @default(REPORTED)
  priority    Priority @default(MEDIUM)
  location    String

  // Relations
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      String
  reportedBy  User     @relation("ReportedIssues", fields: [reportedById], references: [id])
  reportedById String
  assignedTo  User?    @relation("AssignedIssues", fields: [assignedToId], references: [id])
  assignedToId String?
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  hotelId     String

  @@map("issues")
}

model Reservation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  pmsId         String   @unique  // ID from the PMS system
  guestName     String
  checkIn       DateTime
  checkOut      DateTime
  status        String   // confirmed, cancelled, checked_in, checked_out
  adults        Int      @default(1)
  children      Int      @default(0)
  totalAmount   Float
  paymentStatus String   // pending, partial, paid
  specialRequests String?
  lastSyncedAt  DateTime

  // Relations
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId String
  room    Room   @relation(fields: [roomId], references: [id])
  roomId  String

  @@map("reservations")
}

model SyncLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  
  changeCount Int
  success    Boolean
  error      String?

  // Relations
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId String

  @@map("sync_logs")
}

enum Role {
  MANAGER
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
}

enum RoomStatus {
  VACANT
  OCCUPIED
  CLEANING
  MAINTENANCE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum IssueType {
  MAINTENANCE
  HOUSEKEEPING
  SECURITY
  IT
  OTHER
}

enum IssueStatus {
  REPORTED
  INVESTIGATING
  IN_PROGRESS
  RESOLVED
}